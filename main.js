const { Client, Intents } = require('discord.js-selfbot-v13');
const express = require('express');
const app = express();
const PORT = 8080;

// Konfiguracja klienta Discord
const client = new Client({
  checkUpdate: false,
});

// Serwer HTTP do utrzymania aktywno≈õci na Render (dla darmowego tieru)
app.get('/', (req, res) => {
  res.send('Self-bot dzia≈Ça na Render! üöÄ');
});

app.listen(PORT, () => {
  console.log(`Serwer pingujƒÖcy dzia≈Ça na porcie ${PORT}`);
});

// Obs≈Çuga zdarze≈Ñ Discorda
client.once('ready', () => {
  console.log(`Zalogowano jako ${client.user.tag}!`);

  // Dodaj poni≈ºszy kod do obs≈Çugi wysy≈Çania reklam
  const serverAdChannels = [
    '1346609266987110451', '1346609268375158834', '1346609275761332325', '1346609280291442708', '1346609283932094529'
  ];
  const partnershipAdChannel = '1346609247869337701';

  // Wysy≈Çanie serverAd co 11 minut
  setInterval(async () => {
  for (const channelId of serverAdChannels) {
    try {
      const channel = client.channels.cache.get(channelId);
      if (channel) {
        await channel.send(serverAd);
        console.log(`Wys≈Çano reklamy na kanale: ${channelId}`);
      } else {
        console.error(`Nie znaleziono kana≈Çu o ID ${channelId}`);
      }
    } catch (err) {
      console.error(`B≈ÇƒÖd wysy≈Çania wiadomo≈õci na kanale ${channelId}:`, err);
    }
  }
}, 11 * 60 * 1000); // 11 minut w milisekundach


  // Wysy≈Çanie partnershipAd co 6 minut
  setInterval(async () => {
    const channel = client.channels.cache.get(partnershipAdChannel);
    if (channel) {
      await channel.send(partnershipAd);
    } else {
      console.error(`Nie znaleziono kana≈Çu o ID ${partnershipAdChannel}`);
    }
  }, 6 * 60 * 1000); // 6 minut w milisekundach
});

const partnershipAd = '# PV PO PARTNERSTWO';
// Reklama serwera
const serverAd = `
# üöÄ Flexify - Tw√≥j sklep Discord!
> szybko, tanio i wygodnie. Zobacz, co dla Ciebie mamy!

# Dlaczego Flexify?

### ‚≠ê „ÉªSzeroki wyb√≥r ‚Äì Nitro, gry, do≈Çadowania i wiƒôcej!
### ‚≠ê „ÉªB≈Çyskawiczna obs≈Çuga ‚Äì Zam√≥wienia realizujemy szybko i sprawnie!
### ‚≠ê „ÉªNiskie ceny ‚Äì Tylko najlepsze oferty na rynku!
# Co znajdziesz w Flexify?

>  üõí „ÉªNitro Boosty oraz Basic
>  üõí „ÉªPersonalizacja kont i dekoracje
>  üõí „ÉªDo≈Çadowania do gier (Fortnite, Roblox, Brawl Stars...)
>  üõí „ÉªSocial Boosting ‚Äì Zwiƒôksz swoje zasiƒôgi!
>  üõí „ÉªGry ‚Äì Minecraft, GTA i inne hity!
>  üõí „Éª Wymiany ‚Äì Prosto i bezpiecznie!
# Dlaczego warto?

üîπ„ÉªKonkursy i eventy ‚Äì CzekajƒÖ na Ciebie nagrody!
üîπ„ÉªPartnerAI ‚Äì Automatyczne partnerstwa na Discordzie!
üîπ„ÉªSzybka pomoc ‚Äì Zawsze gotowi, by Ci pom√≥c!
# Czas to pieniƒÖdz!
Z nami oszczƒôdzisz czas i pieniƒÖdze. Zaufaj Flexify!

# üí∏ 0,60 z≈Ç za ka≈ºde partnerstwo!


Do≈ÇƒÖcz do nas teraz i sprawd≈∫, co Flexify ma dla Ciebie!
discord.gg/Flexify
`;

const partnershipTimestamps = new Map();
const partneringUsers = new Map();

client.on('messageCreate', async (message) => {
  // Sprawdzenie, czy wiadomo≈õƒá pochodzi od innego u≈ºytkownika
  if (!message.guild && !message.author.bot && message.author.id !== client.user.id) {
    const now = Date.now();
    const lastPartnership = partnershipTimestamps.get(message.author.id);

    if (lastPartnership && now - lastPartnership < 7 * 24 * 60 * 60 * 1000) {
      // Je≈õli u≈ºytkownik chce nawiƒÖzaƒá partnerstwo wcze≈õniej ni≈º tydzie≈Ñ, wy≈õlij wiadomo≈õƒá
      await message.channel.send("‚è≥ Musisz jeszcze poczekaƒá, zanim bƒôdziesz m√≥g≈Ç nawiƒÖzaƒá kolejne partnerstwo. Spr√≥buj ponownie za tydzie≈Ñ.");
      return;
    }

    if (!partneringUsers.has(message.author.id)) {
      partneringUsers.set(message.author.id, null);
      await message.channel.send("üåé Je≈õli chcesz nawiƒÖzaƒá partnerstwo, wy≈õlij swojƒÖ reklamƒô (maksymalnie 1 serwer).");
    } else {
      const userAd = partneringUsers.get(message.author.id);

      if (userAd === null) {
        partneringUsers.set(message.author.id, message.content);
        await message.channel.send(`‚úÖ Wstaw naszƒÖ reklamƒô:\n${serverAd}`);
        await message.channel.send("‚è∞ Daj znaƒá, gdy wstawisz reklamƒô!");
      } else if (message.content.toLowerCase().includes('wstawi') || message.content.toLowerCase().includes('ju≈º') || message.content.toLowerCase().includes('gotowe') || message.content.toLowerCase().includes('juz')) {
        // Dodajemy pytanie o do≈ÇƒÖczenie na serwer
        await message.channel.send("Czy wymagane jest do≈ÇƒÖczenie na tw√≥j serwer?");
        const filter = m => m.author.id === message.author.id;
        const reply = await message.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] }).catch(() => null);

        if (reply && !reply.first().content.toLowerCase().includes('nie')) {
          await message.channel.send("Jako bot nie mogƒô automatycznie do≈ÇƒÖczyƒá na serwer, ale je≈õli masz 100 os√≥b na serwerze to m√≥j w≈Ça≈õciciel @ayomati1 nied≈Çugo na pewno to zrobi");
          const notificationUser = await client.users.fetch('1238567838948659264');
          await notificationUser.send(`Wymagane do≈ÇƒÖczenie na serwer:\n${userAd}`);
        }
        const guild = client.guilds.cache.get('1327335941299241044');
        if (!guild) {
          await message.channel.send("‚ùï Nie znaleziono serwera.");
          return;
        }

        const member = await guild.members.fetch(message.author.id).catch(() => null);
        if (!member) {
          await message.channel.send("‚ùï Do≈ÇƒÖcz na serwer, aby kontynuowaƒá!");
          return;
        }

        const channel = guild.channels.cache.get('1329229884048019520');
        if (!channel) {
          await message.channel.send("Nie znaleziono kana≈Çu o ID '1329229884048019520'.");
          return;
        }

        const displayName = member ? member.displayName : message.author.username;
        await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
        await message.channel.send("‚úÖ Dziƒôkujemy za partnerstwo! W razie jakichkolwiek pyta≈Ñ prosimy o kontakt z u≈ºytkownikiem .b_r_tech. (bRtech)");

        // Zaktualizuj czas ostatniego partnerstwa
        partnershipTimestamps.set(message.author.id, now);
        partneringUsers.delete(message.author.id);
      }
    }
  }
});

// Obs≈Çuga zdarze≈Ñ, kiedy u≈ºytkownik do≈ÇƒÖcza na serwer
client.on('guildMemberAdd', async (member) => {
  // Sprawd≈∫, czy u≈ºytkownik znajduje siƒô w mapie partneringUsers
  if (partneringUsers.has(member.id)) {
    // Wy≈õlij wiadomo≈õƒá powitalnƒÖ lub dalsze instrukcje do u≈ºytkownika
    const userAd = partneringUsers.get(member.id);
    const channel = guild.channels.cache.get('1329229884048019520');
    if (channel) {
      const displayName = member ? member.displayName : message.author.username;
      await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
      const dmChannel = await member.createDM();
      await dmChannel.send("‚úÖ Dziƒôkujemy za do≈ÇƒÖczenie! Twoja reklama zosta≈Ça wstawiona.");
      // Usu≈Ñ u≈ºytkownika z mapy partneringUsers
      partneringUsers.delete(member.id);
      // Zaktualizuj czas ostatniego partnerstwa
      const now = Date.now();
      partnershipTimestamps.set(member.id, now);
    } else {
      console.error("Nie znaleziono kana≈Çu 'üíº„Éªpartnerstwa'.");
    }
  }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', (error) => {
  console.error('B≈ÇƒÖd Discorda:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Nieobs≈Çu≈ºony b≈ÇƒÖd:', error);
});

// Logowanie do Discorda
client.login(process.env.DISCORD_TOKEN);
